// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.0
// source: pb/coordinator.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CoordinatorClient is the client API for Coordinator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatorClient interface {
	Heartbeat(ctx context.Context, in *HeartbeatArgs, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Register(ctx context.Context, in *RegisterArgs, opts ...grpc.CallOption) (*RegisterReply, error)
	TCQuery(ctx context.Context, in *TCQueryArgs, opts ...grpc.CallOption) (*TCQueryReply, error)
	LPComplete(ctx context.Context, in *LPCompleteArgs, opts ...grpc.CallOption) (*LPCompleteReply, error)
	BalanceComplete(ctx context.Context, in *BalanceCompleteArgs, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SinceTimeAcc(ctx context.Context, in *SinceTimeAccArgs, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ResultPersistComplete(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepairBalanceComplete(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RepairTurnComplete(ctx context.Context, in *RepairTurnArgs, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type coordinatorClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorClient(cc grpc.ClientConnInterface) CoordinatorClient {
	return &coordinatorClient{cc}
}

func (c *coordinatorClient) Heartbeat(ctx context.Context, in *HeartbeatArgs, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.Coordinator/Heartbeat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) Register(ctx context.Context, in *RegisterArgs, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := c.cc.Invoke(ctx, "/pb.Coordinator/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) TCQuery(ctx context.Context, in *TCQueryArgs, opts ...grpc.CallOption) (*TCQueryReply, error) {
	out := new(TCQueryReply)
	err := c.cc.Invoke(ctx, "/pb.Coordinator/TCQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) LPComplete(ctx context.Context, in *LPCompleteArgs, opts ...grpc.CallOption) (*LPCompleteReply, error) {
	out := new(LPCompleteReply)
	err := c.cc.Invoke(ctx, "/pb.Coordinator/LPComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) BalanceComplete(ctx context.Context, in *BalanceCompleteArgs, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.Coordinator/BalanceComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) SinceTimeAcc(ctx context.Context, in *SinceTimeAccArgs, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.Coordinator/SinceTimeAcc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) ResultPersistComplete(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.Coordinator/ResultPersistComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) RepairBalanceComplete(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.Coordinator/RepairBalanceComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *coordinatorClient) RepairTurnComplete(ctx context.Context, in *RepairTurnArgs, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.Coordinator/RepairTurnComplete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorServer is the server API for Coordinator service.
// All implementations must embed UnimplementedCoordinatorServer
// for forward compatibility
type CoordinatorServer interface {
	Heartbeat(context.Context, *HeartbeatArgs) (*emptypb.Empty, error)
	Register(context.Context, *RegisterArgs) (*RegisterReply, error)
	TCQuery(context.Context, *TCQueryArgs) (*TCQueryReply, error)
	LPComplete(context.Context, *LPCompleteArgs) (*LPCompleteReply, error)
	BalanceComplete(context.Context, *BalanceCompleteArgs) (*emptypb.Empty, error)
	SinceTimeAcc(context.Context, *SinceTimeAccArgs) (*emptypb.Empty, error)
	ResultPersistComplete(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	RepairBalanceComplete(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	RepairTurnComplete(context.Context, *RepairTurnArgs) (*emptypb.Empty, error)
	mustEmbedUnimplementedCoordinatorServer()
}

// UnimplementedCoordinatorServer must be embedded to have forward compatible implementations.
type UnimplementedCoordinatorServer struct {
}

func (UnimplementedCoordinatorServer) Heartbeat(context.Context, *HeartbeatArgs) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Heartbeat not implemented")
}
func (UnimplementedCoordinatorServer) Register(context.Context, *RegisterArgs) (*RegisterReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedCoordinatorServer) TCQuery(context.Context, *TCQueryArgs) (*TCQueryReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TCQuery not implemented")
}
func (UnimplementedCoordinatorServer) LPComplete(context.Context, *LPCompleteArgs) (*LPCompleteReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LPComplete not implemented")
}
func (UnimplementedCoordinatorServer) BalanceComplete(context.Context, *BalanceCompleteArgs) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BalanceComplete not implemented")
}
func (UnimplementedCoordinatorServer) SinceTimeAcc(context.Context, *SinceTimeAccArgs) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SinceTimeAcc not implemented")
}
func (UnimplementedCoordinatorServer) ResultPersistComplete(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ResultPersistComplete not implemented")
}
func (UnimplementedCoordinatorServer) RepairBalanceComplete(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepairBalanceComplete not implemented")
}
func (UnimplementedCoordinatorServer) RepairTurnComplete(context.Context, *RepairTurnArgs) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RepairTurnComplete not implemented")
}
func (UnimplementedCoordinatorServer) mustEmbedUnimplementedCoordinatorServer() {}

// UnsafeCoordinatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatorServer will
// result in compilation errors.
type UnsafeCoordinatorServer interface {
	mustEmbedUnimplementedCoordinatorServer()
}

func RegisterCoordinatorServer(s grpc.ServiceRegistrar, srv CoordinatorServer) {
	s.RegisterService(&Coordinator_ServiceDesc, srv)
}

func _Coordinator_Heartbeat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HeartbeatArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).Heartbeat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Coordinator/Heartbeat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).Heartbeat(ctx, req.(*HeartbeatArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Coordinator/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).Register(ctx, req.(*RegisterArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_TCQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TCQueryArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).TCQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Coordinator/TCQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).TCQuery(ctx, req.(*TCQueryArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_LPComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LPCompleteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).LPComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Coordinator/LPComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).LPComplete(ctx, req.(*LPCompleteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_BalanceComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceCompleteArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).BalanceComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Coordinator/BalanceComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).BalanceComplete(ctx, req.(*BalanceCompleteArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_SinceTimeAcc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SinceTimeAccArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).SinceTimeAcc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Coordinator/SinceTimeAcc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).SinceTimeAcc(ctx, req.(*SinceTimeAccArgs))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_ResultPersistComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).ResultPersistComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Coordinator/ResultPersistComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).ResultPersistComplete(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_RepairBalanceComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).RepairBalanceComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Coordinator/RepairBalanceComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).RepairBalanceComplete(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Coordinator_RepairTurnComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RepairTurnArgs)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServer).RepairTurnComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Coordinator/RepairTurnComplete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServer).RepairTurnComplete(ctx, req.(*RepairTurnArgs))
	}
	return interceptor(ctx, in, info, handler)
}

// Coordinator_ServiceDesc is the grpc.ServiceDesc for Coordinator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Coordinator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Coordinator",
	HandlerType: (*CoordinatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Heartbeat",
			Handler:    _Coordinator_Heartbeat_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Coordinator_Register_Handler,
		},
		{
			MethodName: "TCQuery",
			Handler:    _Coordinator_TCQuery_Handler,
		},
		{
			MethodName: "LPComplete",
			Handler:    _Coordinator_LPComplete_Handler,
		},
		{
			MethodName: "BalanceComplete",
			Handler:    _Coordinator_BalanceComplete_Handler,
		},
		{
			MethodName: "SinceTimeAcc",
			Handler:    _Coordinator_SinceTimeAcc_Handler,
		},
		{
			MethodName: "ResultPersistComplete",
			Handler:    _Coordinator_ResultPersistComplete_Handler,
		},
		{
			MethodName: "RepairBalanceComplete",
			Handler:    _Coordinator_RepairBalanceComplete_Handler,
		},
		{
			MethodName: "RepairTurnComplete",
			Handler:    _Coordinator_RepairTurnComplete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/coordinator.proto",
}
